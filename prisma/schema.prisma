// Prisma schema for OKR Manager user registration
// You may need to add more models for OKRs, teams, etc. later

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password      String
  role          String
  status        String // "pending", "active", etc.
  isLineManager Boolean  @default(false)
  isSuperUser   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  verificationTokens  VerificationToken[]
  objectives          Objective[]
  invites             Invite[]             @relation("LineManagerInvites")
  jobRoleId           Int?
  jobRole             JobRole?             @relation(fields: [jobRoleId], references: [id])
  gddRoleId           Int?
  gddRole             GddRole?             @relation(fields: [gddRoleId], references: [id])
  lineManagerTeams    LineManagerTeam[]    @relation("LineManager")
  teamMemberOf        LineManagerTeam[]    @relation("TeamMember")
  jobRoleDescriptions JobRoleDescription[]
  passwordResetTokens PasswordResetToken[]
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Objective {
  id               Int                        @id @default(autoincrement())
  guid             String                     @unique @default(uuid())
  title            String
  description      String
  dueDate          DateTime
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  user             User                       @relation(fields: [userId], references: [id])
  userId           Int
  keyResults       KeyResult[]
  quarterlyReviews ObjectiveQuarterlyReview[]
}

model KeyResult {
  id              Int               @id @default(autoincrement())
  title           String
  metric          String
  targetValue     String
  objective       Objective         @relation(fields: [objectiveId], references: [id])
  objectiveId     Int
  successCriteria SuccessCriteria[]
  reviews         KeyResultReview[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model SuccessCriteria {
  id          Int       @id @default(autoincrement())
  description String
  threshold   String
  keyResult   KeyResult @relation(fields: [keyResultId], references: [id])
  keyResultId Int
}

model KeyResultReview {
  id          Int       @id @default(autoincrement())
  keyResult   KeyResult @relation(fields: [keyResultId], references: [id])
  keyResultId Int
  month       Int // 1-12
  year        Int
  progress    Int // e.g., 0-100
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([keyResultId, month, year])
}

model ObjectiveQuarterlyReview {
  id                  Int       @id @default(autoincrement())
  objective           Objective @relation(fields: [objectiveId], references: [id])
  objectiveId         Int
  quarter             Int // 1-4
  year                Int
  grading             Float? // 0.0-1.0, calculated from monthly reviews but editable
  lessonsLearned      String?
  strategicAdjustment String?
  nextQuarterPlanning String?
  engagement          String?
  actionCompletion    String?
  strategicAlignment  String?
  feedbackQuality     String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@unique([objectiveId, quarter, year])
}

model Invite {
  id            Int       @id @default(autoincrement())
  email         String
  token         String    @unique
  lineManager   User      @relation("LineManagerInvites", fields: [lineManagerId], references: [id])
  lineManagerId Int
  dateSent      DateTime
  dateUsed      DateTime?
  status        String // "pending", "used", "expired", "invalidated", "resent"
  expiresAt     DateTime // Invite expiry (7 days after dateSent)
}

model JobRole {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  users               User[]
  jobRoleDescriptions JobRoleDescription[]
}

model GddRole {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model LineManagerTeam {
  id            Int      @id @default(autoincrement())
  lineManager   User     @relation("LineManager", fields: [lineManagerId], references: [id])
  lineManagerId Int
  user          User     @relation("TeamMember", fields: [userId], references: [id])
  userId        Int
  assignedAt    DateTime @default(now())

  @@unique([lineManagerId, userId])
}

model JobRoleDescription {
  id        Int      @id @default(autoincrement())
  jobRoleId Int
  jobRole   JobRole  @relation(fields: [jobRoleId], references: [id])
  managerId Int
  manager   User     @relation(fields: [managerId], references: [id])
  content   String // Rich text/HTML content
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}
