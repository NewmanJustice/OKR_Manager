generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                  Int               @id @default(autoincrement())
  email               String            @unique
  password_hash       String
  name                String
  role                String
  notify_preferences  Json
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  created_key_results KeyResult[]       @relation("UserCreatedKeyResults")
  monthly_reviews     MonthlyReview[]
  created_objectives  Objective[]       @relation("AdminCreatedObjectives")
  objectives          Objective[]
  progress_updates    ProgressUpdate[]
  quarterly_reviews   QuarterlyReview[]
  created_teams       Team[]            @relation("AdminCreatedTeams")
  teams               Team[]            @relation("PDMTeams")
  okrAssignments       OkrAssignment[]
  adminTeamMemberships TeamMembership[] @relation("AdminTeamMemberships")
  userTeamMemberships  TeamMembership[] @relation("UserTeamMemberships")
  key_result_progresses KeyResultProgress[]
}

model Team {
  id               Int              @id @default(autoincrement())
  name             String
  service_area     String
  pdm_id           Int?
  description      String?
  created_by_id    Int
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  progress_updates ProgressUpdate[]
  created_by       User             @relation("AdminCreatedTeams", fields: [created_by_id], references: [id])
  pdm              User?            @relation("PDMTeams", fields: [pdm_id], references: [id])
}

model Objective {
  id               Int         @id @default(autoincrement())
  title            String
  description      String
  pdm_id           Int?
  quarter          Int
  year             Int
  objective_number Int
  created_by_id    Int
  assigned_at      DateTime?
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
  key_results      KeyResult[]
  created_by       User        @relation("AdminCreatedObjectives", fields: [created_by_id], references: [id])
  pdm              User?       @relation(fields: [pdm_id], references: [id])
  okrAssignments    OkrAssignment[]
}

model KeyResult {
  id               Int              @id @default(autoincrement())
  objective_id     Int
  title            String
  description      String
  target_value     Float?
  current_value    Float?
  unit             String?
  due_date         DateTime?
  status           String
  created_by_id    Int
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  created_by       User             @relation("UserCreatedKeyResults", fields: [created_by_id], references: [id])
  objective        Objective        @relation(fields: [objective_id], references: [id])
  progress_updates ProgressUpdate[]
  key_result_progresses KeyResultProgress[]
}

model ProgressUpdate {
  id             Int       @id @default(autoincrement())
  key_result_id  Int
  team_id        Int
  progress_value Float?
  comments       String?
  evidence_url   String?
  updated_by_id  Int
  created_at     DateTime  @default(now())
  updated_by     User      @relation(fields: [updated_by_id], references: [id])
  team           Team      @relation(fields: [team_id], references: [id])
  key_result     KeyResult @relation(fields: [key_result_id], references: [id])
}

model MonthlyReview {
  id                  Int      @id @default(autoincrement())
  pdm_id              Int
  review_date         DateTime
  quarter             Int
  year                Int
  progress_summary    String
  blockers_identified String
  resource_needs      String
  forward_planning    String
  submitted_at        DateTime
  created_at          DateTime @default(now())
  pdm                 User     @relation(fields: [pdm_id], references: [id])
}

model QuarterlyReview {
  id                    Int      @id @default(autoincrement())
  pdm_id                Int
  review_date           DateTime
  quarter               Int
  year                  Int
  okr_grading           Json
  lessons_learned       String
  strategic_adjustments String
  next_quarter_planning String
  stakeholder_feedback  String
  submitted_at          DateTime
  created_at            DateTime @default(now())
  pdm                   User     @relation(fields: [pdm_id], references: [id])
}

model ReviewMeeting {
  id             Int      @id @default(autoincrement())
  type           String
  scheduled_date DateTime
  attendees      Json
  agenda         String?
  outcomes       String?
  action_items   Json
}

model OkrAssignment {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  okr        Objective @relation(fields: [okrId], references: [id])
  okrId      Int
  assignedAt DateTime @default(now())

  @@unique([userId, okrId])
}

model TeamMembership {
  id       Int  @id @default(autoincrement())
  admin    User @relation("AdminTeamMemberships", fields: [adminId], references: [id])
  adminId  Int
  user     User @relation("UserTeamMemberships", fields: [userId], references: [id])
  userId   Int
  createdAt DateTime @default(now())

  @@unique([adminId, userId])
}

model KeyResultProgress {
  id            Int      @id @default(autoincrement())
  key_result_id Int
  user_id       Int
  month         Int      // 1-12
  year          Int
  status        String
  metric_value  Float?
  evidence      String?
  comments      String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  key_result    KeyResult @relation(fields: [key_result_id], references: [id])
  user          User      @relation(fields: [user_id], references: [id])

  @@unique([key_result_id, user_id, month, year])
}
